
// Vendor specific prefixes
@mixin vendor($property, $value...) {
	-moz-#{$property}:		$value;
	-ms-#{$property}:		$value;
	-webkit-#{$property}:	$value;
	-o-#{$property}:		$value;
	#{$property}:			$value;
}

// TRANSITION
@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  // $prefixes:      ("-webkit-", "" );
  // @each $prefix in $prefixes {
  //   #{$prefix}transition: $transition;
  // }
	-moz-transition:		-moz-#{$transition};
	-o-transition:			-o-#{$transition};
	-ms-transition:			-ms-#{$transition};
	-webkit-transition:		-webkit-#{$transition};
	transition:				$transition;
}

// TRANSFORM
// generic transform
@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
   @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}

// CALC
@mixin calc($property, $expression...) {
	#{$property}: -webkit-calc(#{$expression});
	#{$property}: calc(#{$expression});
}

// CSS3 GRADIENTS
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  @return $is-direction or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  @return 90deg - convert-angle($value, 'deg');
}

@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin gradient($gradient:(#fff 0%, #000 100%), $type:linear, $shape:vertical, $repeat:false, $fallback:#fff) {
  // set background color as fallback value
  background:$fallback;
  // initialize $vendors for
  $vendors:null;
  // determine shape or direction
  @if $shape == horizontal {
    // vendor-specific horizontal directions
    $vendors: (
            (-moz-, left),
            (-webkit-, right),
            (-o-, right),
            ("", to right)
    );
  }
  @elseif $shape != vertical {
    // diagonal linear gradient angle -or- radial gradient shape
    $vendors: (
            (-moz-, $shape),
            (-webkit-, $shape),
            (-o-, $shape),
            ("", $shape)
    );
  }
  @else {
    // default vertical linear gradient
    $vendors: (
            (-moz-, top),
            (-webkit-, top),
            (-o-, top),
            ("", to bottom)
    );
  }
  // check for a repeating gradient
  @if $repeat == true{
    $type:repeating-+$type+-gradient; // yes
  }@else {
    $type:$type+-gradient; //no
  }
  // output vendor-prefixed gradients
  @if str-index($type, linear){
    @each $vendor in $vendors {
      background:unquote(nth($vendor, 1)) + $type + unquote("(" + $gradient + ")");
    }
  }@else {
    @each $vendor in $vendors {
      background:unquote(nth($vendor, 1)) + $type + unquote("(" + $shape + ", " + $gradient + ")");
    }
  }
}

// BOX SIZING
@mixin box-sizing($type: border-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing:    $type;
  -ms-box-sizing:     $type;
  box-sizing:         $type;
}

// VERTICAL CENTRE
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
}

// PLACEHOLDER
@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

// STICKY FOOTER
@mixin sticky-footer($footer-height, $wrapper-selector: unquote("#siteWrapper"), $container-selector: unquote("#siteContent"), $footer-selector: unquote("#siteFooter")) {
  #{$wrapper-selector} {
    min-height: 100%;
    height: auto !important;
    height: 100%;
    margin-bottom: -$footer-height;
    #{$container-selector} {
      padding: 0 0 $footer-height 0;
    }
  }
  #{$footer-selector} {
    height: $footer-height;
  }
}

//BOX SHADOW
@mixin box-shadow($top:1px, $left:0, $blur:1px, $color:rgba($black,0.2), $inset:false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

// TEXT shadows
@mixin text-shadow($x1:2px, $y1:2px, $blur1:5px, $color1:black, $x2:null, $y2:null, $blur2:null, $color2:null){
  @if ($x2) {
   text-shadow: $x1 $y1 $blur1 $color1, $x2 $y2 $blur2 $color2;
  }
  @else {
    text-shadow: $x1 $y1 $blur1 $color1;
  }
}

// Google Material box shadows
@mixin material_box_shadow ($level, $color:rgb(0,0,0)) {
  @if $level == 1 {
    box-shadow: 0 1px 3px rgba($color,0.12), 0 1px 2px rgba($color,0.24);
  } @else if $level == 2 {
    box-shadow: 0 3px 6px rgba($color,0.16), 0 3px 6px rgba($color,0.23);
  } @else if $level == 3 {
    box-shadow: 0 10px 20px rgba($color,0.19), 0 6px 6px rgba($color,0.23);
  } @else if $level == 4 {
    box-shadow: 0 14px 28px rgba($color,0.25), 0 10px 10px rgba($color,0.22);
  } @else if $level == 5 {
    box-shadow: 0 19px 38px rgba($color,0.30), 0 15px 12px rgba($color,0.22);
  } @else if $level == 0 {
    box-shadow: none;
  }
}

// Flexbox
@mixin display-flex() {
	display:-webkit-box;
	display:-webkit-flex;
	display:-moz-flex;
	display:-ms-flexbox;
	display:flex;
}

@mixin order($val) {
	-ms-flex-order:$val;
	-webkit-order:$val;
	order:$val;
}

@mixin flex($values) {
	-ms-flex:$values;
	-webkit-flex:$values;
	flex:$values;
}

@mixin flex-direction($val) {
	-ms-flex-direction:$val;
	-webkit-flex-direction:$val;
	flex-direction:$val;
}

@mixin align-self($where) {
	-ms-flex-item-align:$where;
	-webkit-align-self:$where;
	align-self:$where;
}

@mixin align-items($where) {
	-ms-flex-align:$where;
	-webkit-align-items:$where;
	align-items:$where;
}

@mixin justify-content($where) {
	@if $where == "space-between" { -ms-flex-pack:justify; }
	@elseif $where == "flex-start" { -ms-flex-pack:start; }
	@elseif $where == "flex-end" { -ms-flex-pack:end; }
	@else { -ms-flex-pack:$where; }

	-webkit-justify-content:$where;
	justify-content:$where;
}

@mixin flex-wrap($how) {
	-ms-flex-wrap:$how;
	-webkit-flex-wrap:$how;
	flex-wrap:$how;
}

//Breakpoints
@mixin for-phone-only {
  @media (max-width: get($breakpoints, 'phone')) { @content; }
}
@mixin for-tablet-portrait-up {
  @media (min-width: get($breakpoints, 'tablet-p')) { @content; }
}
@mixin for-tablet-portait-only {
  @media (min-width: get($breakpoints, 'tablet-p')) and (max-width: get($breakpoints, 'tablet-p-max')) { @content; }
}
@mixin for-tablet-landscape-up {
  @media (min-width: get($breakpoints, 'tablet-p-max')) { @content; }
}
@mixin for-tablet-landscape-only {
  @media (min-width: get($breakpoints, 'tablet-p-max')) and (max-width: get($breakpoints, 'table-l-max')) { @content; }
}
@mixin for-desktop-up {
  @media (min-width: get($breakpoints, 'desktop')) { @content; }
}
@mixin for-desktop-only {
  @media (min-width: get($breakpoints, 'desktop')) and (max-width: get($breakpoints, 'desktop-max')) { @content; }
}
@mixin for-big-desktop-up {
  @media (min-width: get($breakpoints, 'large')) { @content; }
}
